-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Catalog of pre-made images (hosted in /public or Supabase Storage)
CREATE TABLE public.image_catalog (
  id text PRIMARY KEY,              -- e.g., 'sparkle_03'
  url text NOT NULL,                -- public https URL
  weight int NOT NULL DEFAULT 1,
  is_active boolean NOT NULL DEFAULT true,
  theme text                        -- optional ('sparkle','sorry-not-sorry','retro', etc.)
);

-- Fortune requests generated by users
CREATE TABLE public.fortunes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  slug text UNIQUE NOT NULL,        -- short id for /f/[slug]
  handle text NOT NULL,             -- normalized twitter handle
  image_id text NOT NULL REFERENCES public.image_catalog(id),
  image_url text NOT NULL,          -- denormalized for convenience
  created_at timestamptz NOT NULL DEFAULT now(),
  ip_hash text,
  user_agent text,
  share_url text                    -- https://<domain>/f/<slug>
);

-- Optional lightweight analytics
CREATE TABLE public.events (
  id bigserial PRIMARY KEY,
  type text NOT NULL,               -- 'generate','share_click','view'
  fortune_slug text NOT NULL REFERENCES public.fortunes(slug) ON DELETE CASCADE,
  handle text,
  created_at timestamptz NOT NULL DEFAULT now()
);

-- Create indexes for better performance
CREATE INDEX ON public.fortunes (created_at DESC);
CREATE INDEX ON public.fortunes (handle);
CREATE INDEX ON public.events (type, created_at DESC);

-- Insert sample images (you can replace these with your actual image URLs)
INSERT INTO public.image_catalog (id, url, weight, theme) VALUES
('sparkle_01', '/assets/cookies/sparkle_01.svg', 1, 'sparkle'),
('sparkle_02', '/assets/cookies/sparkle_02.svg', 1, 'sparkle'),
('sparkle_03', '/assets/cookies/sparkle_03.svg', 1, 'sparkle'),
('sorry_01', '/assets/cookies/sorry_01.svg', 1, 'sorry-not-sorry'),
('sorry_02', '/assets/cookies/sorry_02.svg', 1, 'sorry-not-sorry'),
('retro_01', '/assets/cookies/retro_01.svg', 1, 'retro'),
('retro_02', '/assets/cookies/retro_02.svg', 1, 'retro');

-- RLS (Row Level Security) policies
-- Keep fortunes and events server-write only (no anon inserts)
-- Allow anon read of image_catalog if needed on client
ALTER TABLE public.image_catalog ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fortunes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

-- Allow public read access to image_catalog
CREATE POLICY "Allow public read access to image_catalog" ON public.image_catalog
  FOR SELECT USING (true);

-- Allow public read access to fortunes
CREATE POLICY "Allow public read access to fortunes" ON public.fortunes
  FOR SELECT USING (true);

-- Restrict writes to service role only for fortunes and events
CREATE POLICY "Service role can insert fortunes" ON public.fortunes
  FOR INSERT WITH CHECK (auth.role() = 'service_role');

CREATE POLICY "Service role can insert events" ON public.events
  FOR INSERT WITH CHECK (auth.role() = 'service_role');
